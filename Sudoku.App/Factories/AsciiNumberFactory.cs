namespace Sudoku.App.Factories
{
    using System;

    public class AsciiNumberFactory
    {
        public char[,] GetNumberAscii(int num)
        {
            switch (num)
            {
                case 0:
                        return new char[,]
                        {
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 1:
                    return new char[,]
                        {
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', '/', '|', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 2:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', '/', '_', '_', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 3:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', '_', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 4:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                            { ' ', ' ', '|', '_', '_', '|', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 5:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', ' ', '_', '_', ' ', ' ' },
                            { ' ', ' ', ' ', '|', '_', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', '_', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 6:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', '/', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', '\\', '_', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 7:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', '_', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 8:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', '(', '_', '_', ')', ' ', ' ' },
                            { ' ', ' ', '(', '_', '_', ')', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                case 9:
                    return new char[,] 
                        {
                            { ' ', ' ', ' ', '_', '_', ' ', ' ', ' ' },
                            { ' ', ' ', '(', '_', '_', '\\', ' ', ' ' },
                            { ' ', ' ', ' ', '_', '_', '/', ' ', ' ' },
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
                        };

                default:
                    throw new ArgumentException("Factory can generate ascii only for digits from 0 to 9");
            }
        }
    }
}